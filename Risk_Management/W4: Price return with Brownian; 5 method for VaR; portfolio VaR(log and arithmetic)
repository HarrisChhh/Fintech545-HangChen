Q1:3 type of price return:Classical Brownian Motion;Arithmetic Return System; Geometric Brownian Motion
A1:
import numpy as np
import matplotlib.pyplot as plt

# Set parameters
np.random.seed(42)
initial_price = 100  # Initial price at time t-1
sigma_squared = 0.01  # Variance of returns
num_simulations = 10000  # Number of simulations

# Simulate returns: N(0, σ^2)
returns = np.random.normal(0, np.sqrt(sigma_squared), num_simulations)

# Calculate prices for each model
price_brownian = initial_price + returns  # Classical Brownian Motion
price_arithmetic = initial_price * (1 + returns)  # Arithmetic Return System
price_logarithmic = initial_price * np.exp(returns)  # Log Return (Geometric Brownian Motion)


# Print the calculated expected values and standard deviations
print("Classical Brownian Motion:")
print(f"Expected Value (Mean): {mean_brownian:.4f}, Standard Deviation: {std_brownian:.4f}")
print("Calculation Details: Expected value ≈ initial_price + mean(return)")

print("\nArithmetic Return System:")
print(f"Expected Value (Mean): {mean_arithmetic:.4f}, Standard Deviation: {std_arithmetic:.4f}")
print("Calculation Details: Expected value ≈ initial_price * (1 + mean(return))")

print("\nLog Return or Geometric Brownian Motion:")
print(f"Expected Value (Mean): {mean_logarithmic:.4f}, Standard Deviation: {std_logarithmic:.4f}")
print("Calculation Details: Expected value ≈ initial_price * exp(mean(return))")

# Visualize distributions
plt.figure(figsize=(10, 6))
plt.hist(price_brownian, bins=50, alpha=0.5, label='Classical Brownian Motion')
plt.hist(price_arithmetic, bins=50, alpha=0.5, label='Arithmetic Return System')
plt.hist(price_logarithmic, bins=50, alpha=0.5, label='Log Return (Geometric Brownian Motion)')
plt.title('Price Distributions for Different Models')
plt.xlabel('Price at time t')
plt.ylabel('Frequency')
plt.legend()
plt.show()






Q2: 5 methods to calculate VaR
A2:
import pandas as pd
import numpy as np
from scipy.stats import norm, t
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

# Define a function to calculate returns using different methods
def calculate_returns(prices, method='arithmetic'):
    if method == 'arithmetic':
        returns = prices.pct_change().dropna()
    elif method == 'logarithmic':
        returns = np.log(prices / prices.shift(1)).dropna()
    else:
        raise ValueError("Invalid method. Choose 'arithmetic' or 'logarithmic'.")
    return returns

# Load DailyPrices.csv data
daily_prices = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DailyPrices.csv', parse_dates=['Date'], index_col='Date')

# Calculate arithmetic returns for all stocks
arithmetic_returns = calculate_returns(daily_prices, method='arithmetic')

# Calculate arithmetic returns for META and adjust to remove the mean
meta_returns = arithmetic_returns['META']
meta_returns_adjusted = meta_returns - meta_returns.mean()

# Define a function to calculate VaR using different methods
def calculate_var(returns, method='normal', alpha=0.05, lambda_value=0.94):
    if method == 'normal':
        # Calculate VaR using Normal distribution
        mean = returns.mean()
        std = returns.std()
        VaR = -norm.ppf(alpha) * std

    elif method == 'ewma':
        # Calculate VaR using Exponentially Weighted Moving Average (EWMA)
        ewma_std = returns.ewm(span=(2 / (1 - lambda_value) - 1)).std().iloc[-1]
        VaR = -norm.ppf(alpha) * ewma_std

    elif method == 't-distribution':
        # Calculate VaR using MLE fitted T-distribution
        params = t.fit(returns)  # Fit T-distribution
        df, loc, scale = params
        VaR = -t.ppf(alpha, df, loc, scale)

    elif method == 'ar1':
        # Calculate VaR using AR(1) model
        model = ARIMA(returns, order=(1, 0, 0))
        model_fit = model.fit()
        predicted_std = np.sqrt(model_fit.params['sigma2'])
        VaR = -norm.ppf(alpha) * predicted_std

    elif method == 'historical':
        # Calculate VaR using Historical Simulation
        sorted_returns = np.sort(returns)
        VaR = -sorted_returns[int(alpha * len(sorted_returns))]

    else:
        raise ValueError("Invalid method. Choose 'normal', 'ewma', 't-distribution', 'ar1', or 'historical'.")
    
    return VaR

# Calculate VaR using different methods
VaR_normal = calculate_var(meta_returns_adjusted, method='normal')
VaR_ewma = calculate_var(meta_returns_adjusted, method='ewma')
VaR_t_dist = calculate_var(meta_returns_adjusted, method='t-distribution')
VaR_ar1 = calculate_var(meta_returns_adjusted, method='ar1')
VaR_historical = calculate_var(meta_returns_adjusted, method='historical')

# Compare the results of the five methods and print
print("\nComparison of VaR Values for META Stock Using Different Methods:")
print(f"VaR using Normal Distribution: {VaR_normal:.4f}")
print(f"VaR using EWMA (λ = 0.94): {VaR_ewma:.4f}")
print(f"VaR using MLE Fitted T Distribution: {VaR_t_dist:.4f}")
print(f"VaR using AR(1) Model: {VaR_ar1:.4f}")
print(f"VaR using Historical Simulation: {VaR_historical:.4f}")

# Visualize the VaR values comparison using a bar chart
methods = ['Normal', 'EWMA', 'T-Distribution', 'AR(1)', 'Historical']
VaR_values = [VaR_normal, VaR_ewma, VaR_t_dist, VaR_ar1, VaR_historical]

plt.figure(figsize=(10, 6))
plt.bar(methods, VaR_values, color='skyblue')
plt.title('VaR Comparison Using Different Methods for META Stock')
plt.xlabel('VaR Calculation Method')
plt.ylabel('VaR Value')
plt.show()








Q3:calculate the VaR of each portfolio as well as your total VaR (VaR of the total holdings). 
Express VaR as a $; Choose a different model for returns and calculate VaR again.
A3:
import os
import pandas as pd
import numpy as np
from scipy.stats import norm

# Mount Google Drive to access files
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# File paths
daily_prices_file = '/content/drive/My Drive/Colab Notebooks/DailyPrices.csv'
portfolio_file = '/content/drive/My Drive/Colab Notebooks/portfolio.csv'

# Check if files exist
if not (os.path.isfile(daily_prices_file) and os.path.isfile(portfolio_file)):
    print("One or both files do not exist. Please check the file paths.")
    exit()

# Read files
daily_prices = pd.read_csv(daily_prices_file, parse_dates=['Date'], index_col='Date')
portfolio = pd.read_csv(portfolio_file)

# Calculate returns
log_returns = np.log(daily_prices / daily_prices.shift(1)).dropna()
arithmetic_returns = daily_prices.pct_change().dropna()

# Filter portfolio for available stocks
portfolio_filtered = portfolio[portfolio['Stock'].isin(log_returns.columns)]

# Create portfolio weights
portfolio_weights = {
    name: holdings.set_index('Stock')['Holding'] / holdings['Holding'].sum()
    for name, holdings in portfolio_filtered.groupby('Portfolio')
}

# Custom exponentially weighted covariance matrix
def calculate_ew_cov_matrix(returns, lambda_value):
    weights = np.array([(1 - lambda_value) * (lambda_value ** i) for i in range(len(returns))][::-1])
    weights /= weights.sum()
    demeaned = returns - returns.mean()
    weighted_cov = demeaned.mul(weights, axis=0).T @ demeaned
    return weighted_cov / weights.sum()

# Portfolio VaR calculation
def calculate_portfolio_var(returns, weights, lambda_value=0.97, alpha=0.05):
    ew_cov_matrix = calculate_ew_cov_matrix(returns, lambda_value)
    portfolio_std = np.sqrt(weights @ ew_cov_matrix @ weights)
    return portfolio_std * abs(norm.ppf(1 - alpha))

# Portfolio total value
def calculate_portfolio_value(portfolio, daily_prices, name):
    holdings = portfolio[portfolio['Portfolio'] == name]
    latest_prices = daily_prices.iloc[-1]
    merged = holdings.merge(latest_prices.rename('Price'), left_on='Stock', right_index=True)
    return (merged['Holding'] * merged['Price']).sum()

# Calculate and display results
total_value = 0
total_var_log = 0
total_var_arithmetic = 0

for name, weights in portfolio_weights.items():
    value = calculate_portfolio_value(portfolio_filtered, daily_prices, name)
    total_value += value
    var_log = calculate_portfolio_var(log_returns[weights.index], weights)
    var_arithmetic = calculate_portfolio_var(arithmetic_returns[weights.index], weights)
    total_var_log += value * var_log
    total_var_arithmetic += value * var_arithmetic
    print(f"\nPortfolio: {name}")
    print(f"Value: ${value:.2f}, VaR (Log Returns): ${value * var_log:.2f}, VaR (Arithmetic): ${value * var_arithmetic:.2f}")

# Combined portfolio
combined_weights = portfolio_filtered.groupby('Stock')['Holding'].sum() / portfolio_filtered['Holding'].sum()
combined_var_log = calculate_portfolio_var(log_returns[combined_weights.index], combined_weights)
combined_var_arithmetic = calculate_portfolio_var(arithmetic_returns[combined_weights.index], combined_weights)

print(f"\nTotal Portfolio Value: ${total_value:.2f}")
print(f"Combined VaR (Log Returns): ${total_value * combined_var_log:.2f}")
print(f"Combined VaR (Arithmetic Returns): ${total_value * combined_var_arithmetic:.2f}")
